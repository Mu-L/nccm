---
# Servers configuration file in YAML format.
#
# This connections & config file is loaded from one of the following paths,
#   in the following order - whichever is found first:
#
#   ~/.config/nccm/nccm.yml
#   ~/.nccm.yml
#   ~/nccm.yml
#   /etc/nccm.yml
#
# For each connection, use the following format:
#   FRIENDLY_NAME:
#     user: USER_NAME
#     address: SERVER_ADDRESS
#     comment: FREETEXT_COMMENT
#     keepalive: KEEPALIVE_TIME
#     identity: IDENTITY_FILE
#     customargs: CUSTOM_ARGS
#
#   Details:
#       FRIENDLY_NAME (mandatory field). Can be any of:
#         Freetext descriptive name:
#         user@server:
#         server:
#       USER_NAME - Your login name (optional field).
#       SERVER_ADDRESS - Hostname or IP address (optional field).
#       FREETEXT_COMMENT - Any freetext you like to store as a comment on
#         this connection (optional field).
#       KEEPALIVE_TIME - Override the default nccm_config_keepalive with
#         this value (optional field).
#         Value is in seconds. Use 0 to disable sending keepalive messages
#         for this connection.
#       IDENTITY_FILE - Override the default nccm_config_identity with
#         this path (optional field).
#       CUSTOM_ARGS - Any custom arguments you want to send to ssh that
#         are not currently supported in nccm. These will be appended to
#         the end of the ssh command at connection time (optional field).
#
# You can supply FRIENDLY_NAME as:
#   1.  Descriptive text - this is just a descriptive freetext name and
#       the real username & servername will be read from their own fields.
#       This is the default state and nccm will always prefer taking the
#       username & servername from their dedicated fields if supplied.
#
#   2. user@server:
#       Use this format if you don't want to supply any of the details
#       fields as in these examples (don't indent). The username &
#       servername will be decoded from this line:
#         root@10.10.1.1:
#         user@example2.com:
#
#   3.  servername:
#         It's also possible to supply only the server address without
#         username. In this case nccm will read your currently logged in
#         user name and use that as the ssh login name (don't indent).
#         This will also append: [user@ from login user] to the comment text:
#           myserver:
#           192.168.1.1:
#
#
# Once you're done editing this file, verify it as follows:
#   yamllint nccm.yaml
#
# The "code lines" (those that actually carry the config) must adhere
#   to the yaml structure (proper indentation, etc).
#   A mistake here is wrong and will probably cause nccm to give an
#   error message.
#   yamllint is also very fussy about line lengths (80 chars max),
#   comment indents, no blank lines at the end of the file, etc.
#   These are less important and nccm handles them ok, but best to stick
#   to the yaml structure and keep yamllint happy...


# nccm internal configs:

nccm_config_controlmode: std    # Supported values: std, focus

nccm_config_loglevel: warning
# ^ Supported values: debug, info, warning, error, critical

nccm_config_keepalive: 30
# ^ Send keepalive every n seconds (0 to disable) to prevent disconnection

nccm_config_identity: false
# ^ For public key authentication, normally ssh will load your private key
#   from the default locations. You can force ssh to use your own file by
#   putting it's path here. Or set to false to let ssh do it's own thing.
#   Use lowercase false - otherwise yamllint will complain.

nccm_config_sshprogram: ssh
# ^ The name or path to your ssh command. You can use this to explicitly
#   state the path of your ssh program, or even use a different program that
#   does the ssh (maybe you have a script or wrapper...).

nccm_config_promptuser: false
# ^ Prompt user to press Enter before nccm makes the ssh connection to
#   the server (set to true). This may be useful in some cases, especially
#   if you need to resize your window before the connection is made.
#   Supported values: true, false

nccm_config_importnccmd: true
# ^ Should nccm try to import whatever yml files exist in /etc/nccm.d/ ?
#   This is helpful in a multiuser env where each user can have their own
#   nccm.yml file in their home dir and still benefit from any shared
#   yml files in /etc/nccm.d/ .
#   Files in /etc/nccm.d/ should be called <name>.yml , and following
#   the same connections config format as used here but must not include
#   any program settings values - only connections details.
#   Supported values: true, false

nccm_config_logpath: false
# ^ Path to save the session log file. Set to false to disable logging.
#   Supply something like: /home/myname/nccm_logs/
#   You can use or skip the trailing slash - nccm can handle either.
#   Uses 'tee' to create a copy of the ssh output. Best to view this file
#   with 'catstep' ( get it from: https://github.com/flyingrhinonz/catstep )
#   or regular 'cat'.
#   If nccm cant find this path it will exit with an exception. The reason
#   being that it's bad if you're expecting logging to occur and it doesn't
#   happen - either fix the path or disable logging.


# connections configs:

Another server:
  address: 10.2.2.2
  comment: this is another comment
  user: foo

# Here's a comment and empty lines are ignored

border router:                # Comments are allowed here
  comment: My border router   # And here
  address: 192.168.1.1        # And everywhere else
  user: admin                 # Settings order is not important
  # This comment is indented like the code
  keepalive: 40
  # ^ Override the default nccm_config_keepalive with this
  #   on a per-connection basis.
  identity: /home/user/mykey
  # ^ Override the default nccm_config_identity with this
  #   on a per-connection basis.
  customargs: -v -C -p 2222
  # ^ Your own custom args to ssh. Takes any legal argument to
  #   the ssh command so you can pretty much customize a connection
  #   in any way you desire. You can even use customargs instead of
  #   the nccm.yaml keys/values such as keepalive or identity

test server:
  address: test.example.com
  user: root

root@10.10.1.1:
root@10.10.2.2:   # Note how nothing else is supplied...

user@example2.com:
  comment: Comment supplied, user/server extracted from FriendlyName

192.168.20.1:
  comment: Only server supplied. Currenly logged in username will be used

server.example.com:
# ^ Here nothing else is supplied, just the server name.
#   Again, the currently logged in username will be used

# The final line of yaml must have content. yamllint will complain if you
#   leave empty lines at the bottom.
